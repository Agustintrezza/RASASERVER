from typing import Any, Dict, List, Text
from rasa_sdk import Tracker, Action
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, FollowupAction
import requests
import urllib.parse

class ActionFetchMainMenu(Action):
    def name(self) -> Text:
        return "action_fetch_main_menu"

    async def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        try:
            response = requests.get("http://localhost:5000/api/categories")
            response.raise_for_status()
            categories = response.json()
        except Exception as e:
            print(f"üåê Error al obtener categor√≠as: {e}")
            dispatcher.utter_message(text="‚ö†Ô∏è No pude cargar el men√∫. Intent√° m√°s tarde.")
            return []

        if not categories:
            dispatcher.utter_message(text="‚ö†Ô∏è No hay categor√≠as disponibles por el momento.")
            return []

        message = "üëå ¬°Bienvenido a *Ethereal Tours*! üá¶üá∑‚ú®\n"
        message += "üìã **Seleccion√° una opci√≥n escribiendo su n√∫mero:**\n\n"

        for idx, cat in enumerate(categories, 1):
            name = cat.get('name', 'Sin nombre')
            message += f"{idx}. {name}\n"

        message += "\nüìû Tambi√©n pod√©s escribir \"hablar con un asesor\" para asistencia personalizada."

        dispatcher.utter_message(text=message)

        return [
            SlotSet("dynamic_categories", categories),
            SlotSet("navigation_step", "menu")
        ]

class ActionHandleOption(Action):
    def name(self) -> Text:
        return "action_handle_option"

    async def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        option = tracker.latest_message.get("text").strip()

        dynamic_categories = tracker.get_slot("dynamic_categories")
        if not dynamic_categories:
            dispatcher.utter_message(text="‚ö†Ô∏è No hay men√∫ cargado. Por favor, salud√° de nuevo.")
            return []

        try:
            selected_index = int(option) - 1
            if selected_index < 0 or selected_index >= len(dynamic_categories):
                raise ValueError
        except (ValueError, TypeError):
            dispatcher.utter_message(text="‚ö†Ô∏è Selecci√≥n inv√°lida. Por favor, respond√© con un n√∫mero de la lista.")
            return []

        selected_category = dynamic_categories[selected_index].get('name', 'Categor√≠a desconocida')

        dispatcher.utter_message(text=f"üìö Has seleccionado: *{selected_category}*\nBuscando opciones disponibles...")

        return [
            SlotSet("selected_category", selected_category),
            FollowupAction("action_fetch_products")
        ]
